import math

# Initialize the game board
def init_board():
    return [' ' for _ in range(9)]

# Print the game board
def print_board(board):
    for row in range(3):
        print(board[row * 3] + ' | ' + board[row * 3 + 1] + ' | ' + board[row * 3 + 2])
        if row < 2:
            print('---------')

# Check if there is a winner
def is_winner(board, player):
    win_positions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], # Columns
        [0, 4, 8], [2, 4, 6]             # Diagonals
    ]
    for positions in win_positions:
        if all(board[pos] == player for pos in positions):
            return True
    return False

# Check if the board is full
def is_board_full(board):
    return ' ' not in board

# Get available moves
def get_available_moves(board):
    return [i for i, spot in enumerate(board) if spot == ' ']

# Minimax algorithm with Alpha-Beta pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    if is_winner(board, 'O'):
        return 1
    if is_winner(board, 'X'):
        return -1
    if is_board_full(board):
        return 0
    
    if is_maximizing:
        max_eval = -math.inf
        for move in get_available_moves(board):
            board[move] = 'O'
            eval = minimax(board, depth + 1, False, alpha, beta)
            board[move] = ' '
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for move in get_available_moves(board):
            board[move] = 'X'
            eval = minimax(board, depth + 1, True, alpha, beta)
            board[move] = ' '
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Find the best move for the AI
def best_move(board):
    best_val = -math.inf
    move = None
    for possible_move in get_available_moves(board):
        board[possible_move] = 'O'
        move_val = minimax(board, 0, False, -math.inf, math.inf)
        board[possible_move] = ' '
        if move_val > best_val:
            best_val = move_val
            move = possible_move
    return move

# Main function to play the game
def play_game():
    board = init_board()
    print_board(board)
    
    while True:
        # Human player's turn
        human_move = int(input("Enter your move (0-8): "))
        if board[human_move] != ' ':
            print("Invalid move. Try again.")
            continue
        board[human_move] = 'X'
        print_board(board)
        
        if is_winner(board, 'X'):
            print("Human wins!")
            play_game()
            break
        if is_board_full(board):
            print("It's a tie!")
            play_game()
            break
        
        # AI's turn
        ai_move = best_move(board)
        board[ai_move] = 'O'
        print("AI move:")
        print_board(board)
        
        if is_winner(board, 'O'):
            print("AI wins!")
            play_game()
            break
        if is_board_full(board):
            print("It's a tie!")
            play_game()
            break

# Play the game
play_game()
